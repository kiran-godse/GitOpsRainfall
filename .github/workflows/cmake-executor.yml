name: Executor
on:
  pull_request_target:
    types:
      - closed
    
  

jobs:

  prelude:

    runs-on:                              self-hosted
    
    if:                                   github.event.pull_request.merged == true

    defaults:
      run:
        shell: bash
    
    permissions:
      packages:                           write
      actions:                            write
      id-token:                           write
      contents:                           write
      pull-requests:                      write
    
    outputs:

      src-upstream-rel-version:           ${{ steps.loader.outputs.src_upstream_rel_version}}
      src-upstream-rel-time:              ${{ steps.loader.outputs.src_upstream_rel_time }}

      src-current-version:                ${{ steps.loader.outputs.src_current_release }}
      src-current-build-time:             ${{ steps.loader.outputs.src_current_timestamp }}

      base-img-tag:                       ${{ steps.loader.outputs.base_img_tag }}

      base-img-remote-platform-version:   ${{ steps.base-img-upstream.outputs.version }}
      base-img-local-platform-version:    ${{ steps.base-img-local.outputs.version }}

      will_pull_base_image:               ${{ steps.processor.outputs.pull }}
    
    steps:

      - name: Normalize Runner Arch
        id:   arch
        run: |
          if [ "${{ runner.arch }}" == "X64" ]; then
            echo "runner="amd64"" >> "$GITHUB_OUTPUT"
          else
            echo "runner="${{ runner.arch }}" " >> "$GITHUB_OUTPUT"
          fi

      - name: Load Bauplan
        id:   loader
        run: |
          PLAN="$(cat ./artefacts/plan.json)"
          echo $PLAN
          SRC_UPSTREAM_REL_VER=$(echo $PLAN | jq -r '.src_upstream_rel_version')
          SRC_UPSTREAM_REL_TIME=$(echo $PLAN | jq -r '.src_upstream_rel_time')
          SRC_CURRENT_REL_VER=$(echo $PLAN | jq -r '.src_current_release')
          SRC_CURRENT_TIMESTAMP=$(echo $PLAN | jq -r '.src_current_timestamp')

          BASE_IMAGE_NAME=$(echo $PLAN | jq -r '.base_img_name')
          BASE_IMAGE_TAG=$(echo $PLAN | jq -r '.base_img_tag')


          echo "src_upstream_rel_ver=$SRC_UPSTREAM_REL_VER" >> $GITHUB_OUTPUT
          echo "src_upstream_rel_time=$SRC_UPSTREAM_REL_TIME" >> $GITHUB_OUTPUT
          echo "src_current_release=$SRC_CURRENT_REL_VER" >> $GITHUB_OUTPUT
          echo "src_current_timestamp=$SRC_CURRENT_TIMESTAMP" >> $GITHUB_OUTPUT
          echo "base_img_name=$BASE_IMAGE_NAME" >> $GITHUB_OUTPUT
          echo "base_img_tag=$BASE_IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Get Remote Base Image Meta
        id:   base-img-upstream
        run: |
          echo "version=$( docker buildx imagetools inspect ${{needs.prelude.outputs}}  --format "{{json .Manifest}}" | jq '.manifests | .[] | select(.platform.architecture=="${{ steps.arch.outputs.runner }}" )'  | jq -r '.digest' )" \
          >> "$GITHUB_OUTPUT"

      - name: Base Image Local Meta Getter
        id:   base-img-local
        run:
          echo "version=$( docker inspect ${{ vars.RAINFALL_DEF_BASE_IMAGE_TAG_NAME }}:${{ vars.RAINFALL_DEF_BASE_IMAGE_TAG_TAG }} |  jq -r '.[0].RepoDigests[0]' | cut -d'@' -f2)" >> "$GITHUB_OUTPUT"
        continue-on-error: true

        
      - name: Output Creator
        id:   processor
        run: |
          if [[ "${{ steps.base-img-local.outputs.version }}" != "${{ steps.base-img-upstream.outputs.version }}" ]] ; then
            echo "pull=true" >> "$GITHUB_OUTPUT"
          fi

#       - name: Plan Checker
#         id:   checker
#         run: |
#           if [[ "${{ steps.processor.outputs.reset }}" == "true" || "${{ steps.processor.outputs.rebuild }}" ]]  ; then
#             echo "make_plan=true" >> "$GITHUB_OUTPUT"
#           fi

#       - name:               Stale Packages Scavenger
#         uses:               smartsquaregmbh/delete-old-packages@v0.7.0
#         with:
#           token:            ${{ secrets.GITHUB_TOKEN }}
#           organization:     ${{ github.repository_owner }}
#           type:             container
#           rate-limit:       true
#           dry-run:          true
#           # version-pattern:  "-v\\d+.\\d+.\\d+"
#           names: |
#             ${{ github.event.repository.name }}-amd64
#             ${{ github.event.repository.name }}-arm64
#             ${{ github.event.repository.name }}-arm32
#             ${{ github.event.repository.name }}


#         continue-on-error: true
          

#       - name: Code Checkout
#         uses: actions/checkout@v3

#       - name:   Plan Creator
#         id:     planner
#         uses:   jsdaniell/create-json@v1.2.2
#         if:     ${{ steps.checker.outputs.make_plan }}
#         with: 
#           name: "plan.json"
#           dir:  "artefacts/"
#           json: 
#             '{
#                 "cmake_src_release"     : "${{ steps.cmake-git.outputs.version }}",
#                 "cmake_tgt_release"     : "${{ steps.cmake-img.outputs.version }}",
#                 "cmake_tgt_base_tag"    : "${{ steps.cmake-img.outputs.base_version }}",
#                 "cmake_tgt_timestamp"   : "${{ steps.cmake-img.outputs.created_at }}",
#                 "base_upstream_tag"     : "${{ steps.base-img-upstream.outputs.tag }}"
#               }'
      
#       - name:               Plan Descriptor
#         id:                 descriptor
#         if:                 ${{ steps.checker.outputs.make_plan }}
#         working-directory: ./artefacts
#         run: |
#           SHORT_SHA=$(echo ${{ github.sha}} | cut -c1-8)
#           NOW=$(date +'%Y-%m-%dT%H:%M:%S')
#           DESCRIPTOR="plan.txt"
#           echo "descriptor=$DESCRIPTOR" >> "$GITHUB_OUTPUT"
          
#           echo "Action Plan for Commit ${SHORT_SHA} as at ${NOW}:" >> $DESCRIPTOR

#           COUNTER=1
#           if  [ ${{ steps.processor.outputs.rebuild }} ]
#           then
#             echo "${COUNTER}. Current CMake ${{ steps.cmake-img.outputs.version }} created at ${{ steps.cmake-img.outputs.created_at }} will be updated to upstream CMake ${{ steps.cmake-git.outputs.version }} " \
#             "created at ${{ github.event.repository.updated_at}}." >> $DESCRIPTOR
#             COUNTER=$(( COUNTER+1 ))
#           else
#             echo "${COUNTER}. CMake${{ steps.cmake-img.outputs.version }} (v${{ steps.cmake-img.outputs.major }} is current. No rebuild required currently." >> $DESCRIPTOR
#             COUNTER=$(( COUNTER+1 ))
#           fi

#           if  [ ${{ steps.processor.outputs.reset }} ]
#           then
#             echo "${COUNTER}. The ${{ env.IMG_BASE }}@${{ steps.cmake-img.outputs.base_version }} image will be updated to ${{ env.IMG_BASE }}@${{ steps.base-img-upstream.outputs.tag }} with prior cache invalidation for optimising cache transfers." >> $DESCRIPTOR
#             COUNTER=$(( COUNTER+1 ))
#           else
#             echo "${COUNTER}. ${{ env.IMG_BASE }}@${{ steps.cmake-img.outputs.base_version  }} is current. No action will be taken." >> $DESCRIPTOR
#             COUNTER=$(( COUNTER+1 ))
#           fi

              

#       - name: Pull Request Creator
#         uses: peter-evans/create-pull-request@v5
#         if:   ${{ steps.checker.outputs.make_plan }}
#         with:
#             commit-message: "Checking in new action plan ${{ runner.name }}:${{ github.run_id }}"
#             branch:         "create-pull-request/plan"
#             delete-branch:  true
#             draft:          false
#             title:          "Auto Detected Update Approval Process"
#             body:           "New Action Plan ${{ runner.name }}/${{ runner.os }}-${{ runner.arch }}:${{ github.run_id }} detailing applicable updates to the CMake container and binaries. See ${{ steps.descriptor.outputs.descriptor }} for details."
#             labels:         auto, updates, container, cmake

          

      - name: Output Echoer
        id:   echoer
        run: |
          echo "Upstream CMake Release            : ${{ steps.loader.outputs.src_upstream_rel_ver }}"
          echo "Upstream CMake Release Time       : ${{ steps.loader.outputs.src_upstream_rel_time }}"

          echo "CMake Image Version               : ${{ steps.loader.outputs.src_current_release }}"
          echo "CMake Image Creation Time         : ${{ steps.loader.outputs.src_current_timestamp }}"



          echo "Remote Base Tag                   : ${{ steps.loader.outputs.base_img_tag }}"
          echo "Remote Platform Specific Version  : ${{ steps.base-img-upstream.outputs.version }}"
          echo "Local Base Version                : ${{ steps.base-img-local.outputs.version }}"

          echo "Will Pull Base Image              : ${{ steps.processor.outputs.pull }}"
       
#   prelude_checker:

#     runs-on:  self-hosted
#     needs:    prelude
#     defaults:
#       run:
#         shell: bash
#     steps:
#       - name: Prelude Output Checker
#         run: |
#           SHORT_SHA=$(echo ${{ github.sha}} | cut -c1-8)
#           NOW=$(date +'%Y-%m-%dT%H:%M:%S')
#           echo "Action Plan for Commit ${SHORT_SHA} as at ${NOW}:"

#           if  [ ${{ needs.prelude.outputs.will_rebuild_cmake }} ]
#           then
#             echo "Current CMake ${{ needs.prelude.outputs.cmake_img_version }} created at ${{ needs.prelude.outputs.cmake_img_creation_time }} will be updated to upstream CMake ${{ needs.prelude.outputs.cmake_src_version }} " \
#             "created at ${{ github.event.repository.updated_at}}."
#           else
#             echo "CMake${{ needs.prelude.outputs.cmake_img_version }} (v${{ needs.prelude.outputs.cmake_img_major }} is current. No rebuild required currently."
#           fi

#           if  [ ${{ needs.prelude.outputs.will_rebuild_image }} ]
#           then
#             echo "${{ env.IMG_BASE }}@${{ needs.prelude.outputs.cmake_base_version }} will be updated to ${{ env.IMG_BASE }}@${{ needs.prelude.outputs.base_img_tag }}."
#             echo "Cache will be invalidated before run."
#           else
#             echo "${{ env.IMG_BASE }}@${{ needs.prelude.outputs.base_img_remote_version }} is current. No action will be taken."
#           fi

#           if  [ ${{ needs.prelude.outputs.will_pull_base_image_TAG }} ]
#           then
#             echo "${{ env.IMG_BASE }}@${{ needs.prelude.outputs.base_img_local_version }} will be updated on ${{ runner.name }} to the ${{ runner.os }}/${{ runner.arch }} version: ${{ env.IMG_BASE }}@${{ needs.prelude.outputs.base_img_remote_version }}" \
#             "corresponding to multi platform tag ${{ env.IMG_BASE }}@${{ needs.prelude.outputs.base_img_tag }}."
#           fi

          


#   #     - name: Code Checkout
#   #       uses:   actions/checkout@v3
#   #       with:   
#   #         repository: ${{ env.SRC_URL}}${{ env.SRC_REPO_SUFFIX}}
#   #         path  :       sources
#   #         ref:        ${{ steps.source.outputs.version }}
#   #         fetch-depth: 0

#   #     - id: semver
#   #       name: Semantic Versioning 
#   #       uses: paulhatch/semantic-version@v5.0.3
#   #       with:
#   #         change_path: sources/CMake/Source
      
#   #     - name: GitHub Container Registry Authenticator
#   #       uses: docker/login-action@v2
#   #       with:
#   #         registry: ghcr.io
#   #         username: ${{ github.actor }}
#   #         password: ${{ secrets.GITHUB_TOKEN }}

#   #     - name: Docker Name Getter
#   #       id:   meta
#   #       uses: docker/metadata-action@v4
#   #       with:
#   #         images: |
#   #           ghcr.io/rainfall-one/cmake
#   #         labels: |
#   #           org.opencontainers.image.title=Build Container for CMake  ${{ steps.gatekeeper.outputs.version }}
#   #           org.opencontainers.image.description=Install CMake  ${{ steps.gatekeeper.outputs.version }} from here.
#   #           org.opencontainers.image.version=${{ steps.gatekeeper.outputs.version }}

#   # run: |
#   #         echo "version=$( docker buildx imagetools inspect --raw ghcr.io/${{ github.repository }}  | jq '.manifests[0] | .annotations."org.opencontainers.image.version"')" \
#   #         >> "$GITHUB_OUTPUT"

      
    
   
    

#   # cleanser:
#   #   runs-on: self-hosted
#   #   needs: gatekeeper
#   #   permissions:
#   #     packages: write
#   #     contents: read
#   #     actions: write
#   #   env:
#   #     GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
#   #   steps:
#   #     - name: GitHub Container Registry Authenticator
#   #       uses: docker/login-action@v2
#   #       with:
#   #         registry: ghcr.io
#   #         username: ${{ github.actor }}
#   #         password: ${{ secrets.GITHUB_TOKEN }}

#   #     - name: Cache Listing
#   #       id: list-caches
#   #       shell: bash
#   #       run: |
#   #           first="$(gh api \
#   #             -H 'Accept: application/vnd.github+json' \
#   #             "/repos/${GITHUB_REPOSITORY}/actions/caches" )"

#   #           total_count="$(jq -r '.total_count' <<< "${first}")"
#   #           all_ids="$(jq '.actions_caches[].id' <<< "${first}" | tr '\n' ' ')"
#   #           echo "cache ids total: ${all_ids}"
#   #           echo "cache_ids=$all_ids" >> "$GITHUB_OUTPUT"

#   #     - name: Wipe caches
#   #       id: wipe
#   #       if: ${{ ( github.event.inputs.rebuild == 'true' || needs.gatekeeper.outputs.has_changed == 'true') }}
#   #       shell: bash
#   #       run: |
#   #         for id in ${{ steps.list-caches.outputs.cache_ids }}; do
#   #             echo "deleting cache $id"
#   #             gh api \
#   #               --method DELETE \
#   #               -H 'Accept: application/vnd.github+json' \
#   #               "/repos/${GITHUB_REPOSITORY}/actions/caches/$id"
#   #         done

#   # arm64:
#   #   runs-on: self-hosted
#   #   needs: [semver, cleanser, gatekeeper]
#   #   permissions:
#   #     packages: write
#   #     contents: read
#   #     actions: write
#   #   if: ${{ (needs.gatekeeper.outputs.has_changed == 'true') }}
    
#   #   steps:
#   #     - name: Code Checkout
#   #       uses: actions/checkout@v3

#   #     - name: Set up QEMU
#   #       uses: docker/setup-qemu-action@v2

#   #     - name: Docker Buildx Setup
#   #       uses: docker/setup-buildx-action@v2

#   #     - name: GitHub Container Registry Authenticator
#   #       uses: docker/login-action@v2
#   #       with:
#   #         registry: ghcr.io
#   #         username: ${{ github.actor }}
#   #         password: ${{ secrets.GITHUB_TOKEN }}



#   #     - name: Docker Cache Setup
#   #       uses: actions/cache@v3
#   #       with:
#   #         path: /tmp/.buildx-cache
#   #         key: ${{ runner.os }}-buildx-arm64 #-${{ github.sha }}
#   #         restore-keys: |
#   #           ${{ runner.os }}-buildx-arm64

      
#   #     - name: CPU Core Count
#   #       uses: SimenB/github-actions-cpu-cores@v1
#   #       id: cores

     
      
#   #     - name: Core Count Display
#   #       run: | 
#   #         echo "Cores: ${{ steps.cores.outputs.count }}"
      
#   #     - name: CMake Builder
#   #       uses: docker/build-push-action@v4
#   #       with:
#   #         context: .
#   #         platforms: linux/arm64
#   #         build-args: |
#   #           N_CORES=${{ steps.cores.outputs.count }}
#   #           IMG_BASE=${{en  v.IMG_BASE  }}
#   #           SRC_URL=${{env.   SRC_URL}}   
#   #           SRC_REPO_SUFFIX=${nv.SRC_REPO_FFIX}}
#   #           VERSION=${{needs  .gatekeeper.  outputs.cmake}}
#               # AUTHOR=${{ github.actor }}

#   #         pull: ${{ (  needs.gatekeeper.outputs.has_changed == 'true'  ||  github.event.inputs.rebuild == 'true' ) }}
#   #         push: true
#   #         tags: |
#   #           ghcr.io/${{ github.repository }}-arm64:${{ needs.gatekeeper.outputs.cmake }}
#   #         labels: |
#   #           ${{ needs.gatekeeper.outputs.labels }}

#   #         cache-from: type=local,src=/tmp/.buildx-cache
#   #         cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

#   #     - name: Cache Mover
#   #       run: |
#   #           rm -rf /tmp/.buildx-cache
#   #           mv /tmp/.buildx-cache-new /tmp/.buildx-cache

#   # # amd64:
#   # #   runs-on: self-hosted
#   # #   needs:   [semver, cleanser, gatekeeper]
    
#   # #   permissions:
#   # #     packages: write
#   # #     contents: read
#   # #     actions: write


#   # #   steps:

#   # #     - name: Code Checkout
#   # #       uses: actions/checkout@v3

#   # #     - name: QEMU Install
#   # #       uses: docker/setup-qemu-action@v2

#   # #     - name: Docker Buildx Setup
#   # #       uses: docker/setup-buildx-action@v2

#   # #     - name: GitHub Container Registry Authentication
#   # #       uses: docker/login-action@v2
#   # #       with:
#   # #         registry: ghcr.io
#   # #         username: ${{ github.actor }}
#   # #         password: ${{ secrets.GITHUB_TOKEN }}



#   # #     - name: Docker Cache Setup
#   # #       uses: actions/cache@v3
#   # #       with:
#   # #         path: /tmp/.buildx-cache
#   # #         key: ${{ runner.os }}-buildx-amd64 #-${{ github.sha }}
#   # #         restore-keys: |
#   # #           ${{ runner.os }}-buildx-amd64

      
      
#   # #     - name: CPU Core Count
#   # #       uses: SimenB/github-actions-cpu-cores@v1
#   # #       id: cores
        
#   # #     - name: Core Count Display
#   # #       run: |
#   # #         echo "Cores: ${{ steps.cores.outputs.count }}"


#   # #     - name: CMake Build
#   # #       uses: docker/build-push-action@v4
#   # #       with:
#   # #         context: .
#   # #         platforms: linux/amd64
#   # #         build-args: |
#   # #           N_CORES=${{ step  s.cores.outp  uts.count }}
#   # #           SRC_URL=${{env.   SRC_URL}}   
#   # #           SRC_REPO_SUFFIX=${nv.SRC_REPO_FFIX}}
#   # #           VERSION=${{needs  .gatekeeper.outputs.cmake}}

#   # #         pull: ${{ ( github.event_name == 'schedule'  ||  github.event.inputs.rebuild == 'true' ) }}
#   # #         push: true
#   # #         tags: |
#   # #           ghcr.io/${{ github.repository }}-amd64:${{ needs.gatekeeper.outputs.cmake }}  

#   # #         cache-from: type=local,src=/tmp/.buildx-cache
#   # #         cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

#   # #     - name: Cache Mover
#   # #       run: |
#   # #           rm -rf /tmp/.buildx-cache
#   # #           mv /tmp/.buildx-cache-new /tmp/.buildx-cache
    


#   # # manifests:
#   # #   runs-on: self-hosted
#   # #   needs: [arm64, amd64, semver, gatekeeper]
#   # #   permissions:
#   # #     packages: write
#   # #     contents: read

#   # #   steps:

#   # #     - name: GitHub Container Registry Authentication
#   # #       uses: docker/login-action@v2
#   # #       with:
#   # #         registry: ghcr.io
#   # #         username: ${{ github.actor }}
#   # #         password: ${{ secrets.GITHUB_TOKEN }}

#   # #     - name: CMake Version Based
#   # #       run: |
#   # #         docker buildx imagetools create -t ghcr.io/${{ github.repository }}:${{ needs.gatekeeper.outputs.cmake }} \
#   # #         ghcr.io/${{ github.repository }}-arm64:${{ needs.gatekeeper.outputs.cmake }} \
#   # #         ghcr.io/${{ github.repository }}-amd64:${{ needs.gatekeeper.outputs.cmake }}

#   # #     - name: SemVer Management
#   # #       if: ${{ needs.semver.outputs.has_changed }}
#   # #       run: |
#   # #         docker buildx imagetools create -t ghcr.io/${{ github.repository }}:${{ needs.semver.outputs.sem_tags }} \
#   # #         ghcr.io/${{ github.repository }}-arm64:${{ needs.gatekeeper.outputs.cmake }} \
#   # #         ghcr.io/${{ github.repository }}-amd64:${{ needs.gatekeeper.outputs.cmake }}
          
#   # #     - name: Manifest Management
#   # #       run: |
#   # #         docker buildx imagetools create  -t ghcr.io/${{ github.repository }}:latest \
#   # #         ghcr.io/${{ github.repository }}-arm64:${{ needs.gatekeeper.outputs.cmake }} \
#   # #         ghcr.io/${{ github.repository }}-amd64:${{ needs.gatekeeper.outputs.cmake }}      

#   # #         echo " \"annotations\": {\"org.opencontainers.image.description\": \"Build Container for CMake ${{ needs.gatekeeper.outputs.cmake }} \" } " >> descriptors.json


    
#   coda:
#     runs-on: self-hosted
#     needs: prelude 
    
#     permissions:
#       packages: write
#       contents: read
#       actions: write

#     steps:
#       - name: Stale Packages Removal 
#         uses: smartsquaregmbh/delete-old-packages@v0.7.0
#         with:
#           token: ${{ secrets.GITHUB_TOKEN }}
#           organization: rainfall-one
#           type: container
#           rate-limit: true
#           names: |
#             ${{ github.event.repository.name }}-amd64
#             ${{ github.event.repository.name }}-arm64
#             ${{ github.event.repository.name }}
#         continue-on-error: true
      
#   #     - name: Packages Deletion Two
#   #       uses: actions/delete-package-versions@v4
#   #       with: 
#   #         package-name: '${{ github.event.repository.name }}'
#   #         package-type: 'container'
#   #         min-versions-to-keep: 1
#   #         delete-only-untagged-versions: 'true'
#   #       continue-on-error: true

      
#   #     - name: Packages Deletion Amd64 Two
#   #       uses: actions/delete-package-versions@v4
#   #       with: 
#   #         package-name: '${{ github.event.repository.name }}-amd64'
#   #         package-type: 'container'
#   #         min-versions-to-keep: 1
#   #         delete-only-untagged-versions: 'true'
#   #       continue-on-error: true


#   #     - name: Packages Deletion Arm64 Two
#   #       uses: actions/delete-package-versions@v4
#   #       with: 
#   #         package-name: '${{ github.event.repository.name }}-arm64'
#   #         package-type: 'container'
#   #         min-versions-to-keep: 1
#   #         delete-only-untagged-versions: 'true'
#   #       continue-on-error: true

    
      
